<Ajax로 컴포넌트 초기화하기>

1) 컴포넌트 생성 시 Ajax 호출
: 컴포넌트가 화면에 나타날 때 Ajax 요청을 통해 필요한 데이터를 가져오려면, componentDidMount 메서드를 사용합니다. 
이 메서드는 컴포넌트가 마운트된 후 한 번만 호출됩니다.

2) 데이터를 state에 저장
: Ajax를 통해 가져온 데이터는 컴포넌트의 state에 저장합니다. 
이후 render 메서드는 state의 변화를 감지하여 화면을 업데이트합니다. 
이렇게 하면 데이터가 변경될 때마다 자동으로 화면이 갱신됩니다.


<프레젠테이션 컴포넌트와 데이터 종속성 제거하기>
- 리액트를 사용하는 주요 이유 중 하나는 재사용 가능한 컴포넌트를 만들기 위함입니다. 
이를 통해 각 컴포넌트의 책임을 명확히 하고, 유지보수와 테스트가 용이해집니다.

1) 프레젠테이셔널 컴포넌트
: 데이터에 종속되지 않고, 순수하게 UI를 표현하는 컴포넌트입니다.
예를 들어, Nav 컴포넌트를 데이터와 관련 없이 순수한 시각적 표현만 담당하도록 구현합니다.

2) 컨테이너 컴포넌트
: 데이터 처리와 사용자 상호작용을 담당하는 컴포넌트입니다.
데이터의 로딩, 상태 관리, 상호작용 처리 등을 수행합니다.
Nav 컴포넌트를 감싸고 있는 App 컴포넌트가 이 역할을 수행할 수 있습니다.

3) 컴포넌트 분리
: Nav 컴포넌트는 프레젠테이셔널 역할만 남기고, 데이터 관련 로직은 App.js와 같은 컨테이너 컴포넌트로 분리합니다. Article 컴포넌트와 같이, 프레젠테이셔널 컴포넌트는 외부에서 props만 받아서 다른 곳에서도 재활용할 수 있습니다.

이렇게 하면, UI를 담당하는 컴포넌트와 데이터 처리를 담당하는 컴포넌트 간의 책임이 명확히 분리되며, 유지보수와 재사용이 쉬워집니다.